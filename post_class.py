"""Version No: 1Release Date: 6 October 2021 KKSCGet refno from restored database"""from os import errorimport mysql.connectorimport os#from itertools import islicefrom timeit import default_timer as timerfrom helpdesk_requests import *from os.path import exists import json# import pprintfrom json2html import *class SQL_Q(object):    def __init__(self):        self.hostname = ""        self.sql_username = ""        self.sql_pwd = ""        self.sql_port = ""        self.sql_database_name = ""        self.sql_tablename = ""        #self.sql_columns = "*"        #self.ref_list = []        self.pdf_store_path = ""        self.hq_guid = ""        self.sql_setdate = ""        self.sql_limit = "1000"        self.helpdesk_msg = ""        self.helpdesk_company_guid = ""        self.outlet_code = "B2B"        # missing var        self.date_counter = ""        self.doc_type = ""        self.main_list = []        self.missing_list = []        self.temp_list = []        self.miss_retail = ""        self.abs_path = ""        self.ref_no = ""        def message_format_main(self):        return {            "date" : self.date_counter,            "module": self.doc_type,            "missing": self.missing_list        }        def message_format_child(self):        return {            "retail" : self.miss_retail,            "abs_path": self.abs_path,            "ref_no": self.ref_no        }        def clear_message(self):        self.__tablename = ""        self.ref_list = []        return "Message Cleared"        def sql_connect(self):        try:            self.__connect = mysql.connector.connect(                host = self.hostname,                user = self.sql_username,                password = self.sql_pwd,                port = self.sql_port,                database = self.sql_database_name            )            return self.__connect        except error as e:            return e        def check_pdf(self):        try:            # start = timer()            file_exists = exists(self.abs_path)            if file_exists == False:                missing_pdf_record = self.message_format_child()                self.missing_list.append(missing_pdf_record)                print("PDF MISSING: " + self.abs_path)                return "PDF MISSING: " + self.abs_path            elif file_exists == True:                return "PDF EXIST: " + self.abs_path            # end = timer()                # print("Time Taken: " + str(end - start)) # Time in secsd            return file_exists        except error as e:            return e             def post_helpdesk(self):        # Query Which Company based on company_guid        company_info = organisation_info(self.helpdesk_company_guid)                 # Query which user_guid to use        user_info = get_userguid(company_info)        json_format = {"B2B": self.main_list}        # pretty_format = json.dumps(json_format, indent=4)        # pretty_format_str = pprint.pformat(json_format)        # soup = simplejson.dumps(pretty_format_str, indent=4, sort_keys=True)        dic_html = json2html.convert(json = json_format)        # Create Helpdesk Ticket        helpdesk_response = helpdesk_new_ticket(dic_html, user_info["user_guid"], self.outlet_code)        return helpdesk_response    def query_grmain(self):        try:            mycursor = self.__connect.cursor()            self.__tablename = "grmain"            mycursor.execute("""                SELECT                b.acc_name,'GRN' AS TYPE,refno,CODE AS CODE,CONCAT('/media/b2b/rexbridge-b2b.com',b.`file_path`,'/',(SELECT TYPE FROM lite_b2b.menu WHERE module_link = 'panda_gr'),'_',REPLACE(CODE,"/","+-+"),'_',refno,'.pdf') AS file_name,a.grdate                FROM                b2b_summary.grmain a                INNER JOIN lite_b2b.acc b ON a.customer_guid = b.acc_guid                WHERE grdate = '%s'                 ORDER BY b.acc_name, refno                """%(self.date_counter))            self.__sql_output = mycursor.fetchall()            previous_doc_type = self.doc_type            if len(self.missing_list) != 0:                self.temp_list = self.missing_list                self.missing_list = []                        for row in self.__sql_output:                # self.ref_list.append(str(row[0]))                self.miss_retail = str(row[0])                self.doc_type = str(row[1])                self.ref_no = str(row[2])                self.abs_path = str(row[4])                # print(self.doc_type, self.miss_retail, self.ref_no, self.abs_path)                self.check_pdf()            if len(self.__sql_output) == 0: # Handles No records on query                self.missing_list = []            if len(self.missing_list) != 0: #and self.doc_type != previous_doc_type:  # IF NO PDF then create message                self.missing_list + self.temp_list                per_entry = self.message_format_main()                self.main_list.append(per_entry)            self.__connect.close()            return "Sucessfully obtain REFNO from grmain: " + self.date_counter        except mysql.connector.Error as err:            error_msg = "Error: {}".format(err)            return error_msg        def query_grmain_dncn(self):        try:            mycursor = self.__connect.cursor()            self.__tablename = "grmain"            mycursor.execute("""		SELECT 		  b.acc_name,		  'GRDA' AS TYPE,		  refno,		  ap_sup_code AS CODE,		  CONCAT(		    '/media/b2b/rexbridge-b2b.com',		    b.`file_path`,		    '/',		    (SELECT 		      TYPE 		    FROM		      lite_b2b.menu 		    WHERE module_link = 'panda_grda'),		    '_',		    REPLACE(ap_sup_code, "/", "+-+"),		    '_',		    refno,		    '.pdf'		  ) AS file_name,		  a.dncn_date 		FROM		  b2b_summary.grmain_dncn a 		  INNER JOIN lite_b2b.acc b 		    ON a.customer_guid = b.acc_guid 		WHERE a.dncn_date = '%s' 		GROUP BY a.refno		ORDER BY b.acc_name,		  a.refno ; """%(self.date_counter))            self.__sql_output = mycursor.fetchall()            previous_doc_type = self.doc_type            if len(self.missing_list) != 0:                self.temp_list = self.missing_list                self.missing_list = []            for row in self.__sql_output:                self.miss_retail = str(row[0])                self.doc_type = str(row[1])                self.ref_no = str(row[2])                self.abs_path = str(row[4])                self.check_pdf()            if len(self.__sql_output) == 0: # Handles No records on query                self.missing_list = []            if len(self.missing_list) != 0: #and self.doc_type != previous_doc_type:  # IF NO PDF then create message                self.missing_list + self.temp_list                per_entry = self.message_format_main()                self.main_list.append(per_entry)            self.__connect.close()            return "Sucessfully obtain REFNO from grmain_dncn: " + self.date_counter        except mysql.connector.Error as err:            error_msg = "Error: {}".format(err)            return error_msg        def query_dbnotemain(self):        try:            mycursor = self.__connect.cursor()            self.__tablename = "dbnotemain"            mycursor.execute("""                SELECT                b.acc_name,'PRDN' AS TYPE,refno,CODE AS CODE,CONCAT('/media/b2b/rexbridge-b2b.com',b.`file_path`,'/',(SELECT TYPE FROM lite_b2b.menu WHERE module_link = 'panda_prdn'),'_',REPLACE(CODE,"/","+-+"),'_',refno,'.pdf') AS file_name,a.DocDate                FROM                b2b_summary.dbnotemain a                INNER JOIN lite_b2b.acc b ON a.customer_guid = b.acc_guid                WHERE a.DocDate = '%s'  AND a.type = 'debit'                ORDER BY b.acc_name, refno;            """%(self.date_counter))            self.__sql_output = mycursor.fetchall()            previous_doc_type = self.doc_type            if len(self.missing_list) != 0:                self.temp_list = self.missing_list                self.missing_list = []            for row in self.__sql_output:                self.miss_retail = str(row[0])                self.doc_type = str(row[1])                self.ref_no = str(row[2])                self.abs_path = str(row[4])                self.check_pdf()                                if len(self.__sql_output) == 0: # Handles No records on query                self.missing_list = []            if len(self.missing_list) != 0: #and self.doc_type != previous_doc_type:  # IF NO PDF then create message                self.missing_list + self.temp_list                per_entry = self.message_format_main()                self.main_list.append(per_entry)            self.__connect.close()            return "Sucessfully obtain REFNO from dbnotemain: " + self.date_counter        except mysql.connector.Error as err:            error_msg = "Error: {}".format(err)            return error_msg        def query_cnnotemain(self):        try:            mycursor = self.__connect.cursor()            self.__tablename = "cnnotemain"            mycursor.execute("""                SELECT                b.acc_name,'PRCN' AS TYPE,refno,CODE AS CODE,CONCAT('/media/b2b/rexbridge-b2b.com',b.`file_path`,'/',(SELECT TYPE FROM lite_b2b.menu WHERE module_link = 'panda_prcn'),'_',REPLACE(CODE,"/","+-+"),'_',refno,'.pdf') AS file_name,a.DocDate                FROM                b2b_summary.cnnotemain a                INNER JOIN lite_b2b.acc b ON a.customer_guid = b.acc_guid                WHERE DocDate = '%s'  AND a.type = 'CN'                ORDER BY b.acc_name, refno;            """%(self.date_counter))            self.__sql_output = mycursor.fetchall()            previous_doc_type = self.doc_type            if len(self.missing_list) != 0:                self.temp_list = self.missing_list                self.missing_list = []            for row in self.__sql_output:                self.miss_retail = str(row[0])                self.doc_type = str(row[1])                self.ref_no = str(row[2])                self.abs_path = str(row[4])                self.check_pdf()                        if len(self.__sql_output) == 0: # Handles No records on query                self.missing_list = []            if len(self.missing_list) != 0: #and self.doc_type != previous_doc_type:  # IF NO PDF then create message                self.missing_list + self.temp_list                per_entry = self.message_format_main()                self.main_list.append(per_entry)            self.__connect.close()            return "Sucessfully obtain REFNO from cnnotemain: " + self.date_counter        except mysql.connector.Error as err:            error_msg = "Error: {}".format(err)            return error_msg    def query_cndn_amt_PCN(self):        try:            mycursor = self.__connect.cursor()            self.__tablename = "cndn_amt"            mycursor.execute("""                SELECT                b.acc_name,'PCN' AS TYPE,refno,CODE AS CODE,CONCAT('/media/b2b/rexbridge-b2b.com',b.`file_path`,'/','PCN','_',REPLACE(CODE,"/","+-+"),'_',refno,'.pdf') AS file_name,a.DocDate                FROM                b2b_summary.cndn_amt a                INNER JOIN lite_b2b.acc b ON a.customer_guid = b.acc_guid                WHERE a.DocDate = '%s'  AND a.trans_type = 'PCNAMT'                ORDER BY b.acc_name, refno;            """%(self.date_counter))            self.__sql_output = mycursor.fetchall()            previous_doc_type = self.doc_type            if len(self.missing_list) != 0:                self.temp_list = self.missing_list                self.missing_list = []            for row in self.__sql_output:                self.miss_retail = str(row[0])                self.doc_type = str(row[1])                self.ref_no = str(row[2])                self.abs_path = str(row[4])                self.check_pdf()                        if len(self.__sql_output) == 0: # Handles No records on query                self.missing_list = []            if len(self.missing_list) != 0: #and self.doc_type != previous_doc_type:  # IF NO PDF then create message                self.missing_list + self.temp_list                per_entry = self.message_format_main()                self.main_list.append(per_entry)            self.__connect.close()            return "Sucessfully obtain REFNO from cndn_amt: " + self.date_counter        except mysql.connector.Error as err:            error_msg = "Error: {}".format(err)            return error_msg        def query_cndn_amt_PDN(self):        try:            mycursor = self.__connect.cursor()            self.__tablename = "cndn_amt"            mycursor.execute("""                SELECT                b.acc_name,'PDN' AS TYPE,refno,CODE AS CODE,CONCAT('/media/b2b/rexbridge-b2b.com',b.`file_path`,'/','PDN','_',REPLACE(CODE,"/","+-+"),'_',refno,'.pdf') AS file_name,a.DocDate                FROM                b2b_summary.cndn_amt a                INNER JOIN lite_b2b.acc b ON a.customer_guid = b.acc_guid                WHERE a.DocDate = '%s'  AND a.trans_type = 'PDNAMT'                ORDER BY b.acc_name, refno;            """%(self.date_counter))            self.__sql_output = mycursor.fetchall()            previous_doc_type = self.doc_type            if len(self.missing_list) != 0:                self.temp_list = self.missing_list                self.missing_list = []            for row in self.__sql_output:                self.miss_retail = str(row[0])                self.doc_type = str(row[1])                self.ref_no = str(row[2])                self.abs_path = str(row[4])                self.check_pdf()                        if len(self.__sql_output) == 0: # Handles No records on query                self.missing_list = []            if len(self.missing_list) != 0: #and self.doc_type != previous_doc_type:  # IF NO PDF then create message                self.missing_list + self.temp_list                per_entry = self.message_format_main()                self.main_list.append(per_entry)            self.__connect.close()            return "Sucessfully obtain REFNO from cndn_amt: " + self.date_counter        except mysql.connector.Error as err:            error_msg = "Error: {}".format(err)            return error_msg        def query_promo_taxinv(self):        try:            mycursor = self.__connect.cursor()            self.__tablename = "promo_taxinv"            mycursor.execute("""                SELECT 		  b.acc_name,		  'PCI' AS TYPE,		  inv_refno,		  sup_code AS CODE,		  CONCAT(		    '/media/b2b/rexbridge-b2b.com',		    b.`file_path`,		    '/',		    (SELECT 		      TYPE 		    FROM		      lite_b2b.menu 		    WHERE module_link = 'panda_pci'),		    '_',		    REPLACE(sup_code, "/", "+-+"),		    '_',		    IF(		      customer_guid != '1F90F5EF90DF11EA818B000D3AA2CAA9' 		      AND customer_guid != '907FAFE053F011EB8099063B6ABE2862' 		      AND customer_guid != 'D361F8521E1211EAAD7CC8CBB8CC0C93'		      AND customer_guid != '403810171FA711EA9BB8E4E7491C3E1E'		      AND customer_guid != 'B00CA0BE403611EBA2FC000D3AC8DFD7'		      AND customer_guid != '3C475C473DB311EBB4F2AEF59F86279D',		      refno,		      inv_refno		    ),		    '.pdf'		  ) AS file_name,		  a.DocDate 		FROM		  b2b_summary.promo_taxinv a 		  INNER JOIN lite_b2b.acc b 		    ON a.customer_guid = b.acc_guid 		WHERE DocDate = '%s' 		ORDER BY b.acc_name,		  refno ;            """%(self.date_counter))            self.__sql_output = mycursor.fetchall()            previous_doc_type = self.doc_type            if len(self.missing_list) != 0:                self.temp_list = self.missing_list                self.missing_list = []            for row in self.__sql_output:                self.miss_retail = str(row[0])                self.doc_type = str(row[1])                self.ref_no = str(row[2])                self.abs_path = str(row[4])                self.check_pdf()            if len(self.__sql_output) == 0: # Handles No records on query                self.missing_list = []            if len(self.missing_list) != 0: #and self.doc_type != previous_doc_type:  # IF NO PDF then create message                self.missing_list + self.temp_list                per_entry = self.message_format_main()                self.main_list.append(per_entry)            self.__connect.close()            return "Sucessfully obtain REFNO from promo_taxinv: " + self.date_counter        except mysql.connector.Error as err:            error_msg = "Error: {}".format(err)            return error_msg    def query_discheme_taxinv(self):        try:            mycursor = self.__connect.cursor()            self.__tablename = "discheme_taxinv"            mycursor.execute("""                SELECT 		  b.acc_name,		  'DI' AS TYPE,		  inv_refno,		  sup_code AS CODE,		  CONCAT(		    '/media/b2b/rexbridge-b2b.com',		    b.`file_path`,		    '/',		    (SELECT 		      TYPE 		    FROM		      lite_b2b.menu 		    WHERE module_link = 'panda_di'),		    '_',		    REPLACE(sup_code, "/", "+-+"),		    '_',		    inv_refno,		    '.pdf'		  ) AS file_name,		  a.DocDate 		FROM		  b2b_summary.discheme_taxinv a 		  INNER JOIN lite_b2b.acc b 		    ON a.customer_guid = b.acc_guid 		WHERE DocDate = '%s' 		ORDER BY b.acc_name,		  refno ;            """%(self.date_counter))            self.__sql_output = mycursor.fetchall()            previous_doc_type = self.doc_type            if len(self.missing_list) != 0:                self.temp_list = self.missing_list                self.missing_list = []                        for row in self.__sql_output:                self.miss_retail = str(row[0])                self.doc_type = str(row[1])                self.ref_no = str(row[2])                self.abs_path = str(row[4])                self.check_pdf()                #print(self.missing_list)                        if len(self.__sql_output) == 0: # Handles No records on query                self.missing_list = []            if len(self.missing_list) != 0 :  # IF NO PDF then create message                self.missing_list + self.temp_list                per_entry = self.message_format_main()                self.main_list.append(per_entry)                            self.__connect.close()            return "Sucessfully obtain REFNO from discheme_taxinv: " + self.date_counter        except mysql.connector.Error as err:            error_msg = "Error: {}".format(err)            return error_msg        def query_pomain(self):        try:            mycursor = self.__connect.cursor()            self.__tablename = "pomain"            mycursor.execute("""                SELECT                b.acc_name,'PO' AS TYPE,refno,scode AS CODE,CONCAT('/media/b2b/rexbridge-b2b.com',b.`file_path`,'/',(SELECT TYPE FROM lite_b2b.menu WHERE module_link = 'panda_po_2'),'_',REPLACE(scode,"/","+-+"),'_',refno,'.pdf') AS file_name,a.podate                FROM b2b_summary.pomain a                INNER JOIN lite_b2b.acc b ON a.customer_guid = b.acc_guid                WHERE podate = '%s'                 ORDER BY b.acc_name, refno;            """%(self.date_counter))            self.__sql_output = mycursor.fetchall()            previous_doc_type = self.doc_type            if len(self.missing_list) != 0:                self.temp_list = self.missing_list                self.missing_list = []                        for row in self.__sql_output:                self.miss_retail = str(row[0])                self.doc_type = str(row[1])                self.ref_no = str(row[2])                self.abs_path = str(row[4])                self.check_pdf()            if len(self.__sql_output) == 0: # Handles No records on query                self.missing_list = []            if len(self.missing_list) != 0: #and self.doc_type != previous_doc_type:  # IF NO PDF then create message                self.missing_list + self.temp_list                per_entry = self.message_format_main()                self.main_list.append(per_entry)                            self.__connect.close()            return "Sucessfully obtain REFNO from pomain: " + self.date_counter        except mysql.connector.Error as err:            error_msg = "Error: {}".format(err)            return error_msg        